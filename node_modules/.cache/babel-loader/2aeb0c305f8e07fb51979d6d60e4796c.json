{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React Projects\\\\food-order-app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedItems = state.items.concat(action.item);\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nexport default function CartProvider(props) {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    // to add the item in the reducer funtion forward the item as part of the action that's why item: item\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromHandler = id => {\n    // in this case forward the id to the reducer to remove\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/Projects/React Projects/food-order-app/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","existingCartItemIndex","findIndex","id","existingCartItem","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AAEA,UAAMC,qBAAqB,GAAGN,KAAK,CAACH,KAAN,CAAYU,SAAZ,CAAsBF,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYP,MAAM,CAACI,IAAP,CAAYG,EAAtD,CAA9B;AAEA,UAAMC,gBAAgB,GAAGT,KAAK,CAACH,KAAN,CAAYS,qBAAZ,CAAzB;AAEA,UAAMI,kBAAkB,GAAGV,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYM,KAAZ,GAAoBV,MAAM,CAACI,IAAP,CAAYO,MAA/E;AAEA,WAAO;AACLf,MAAAA,KAAK,EAAEM,YADF;AAELL,MAAAA,WAAW,EAAEY;AAFR,KAAP;AAID;;AAED,SAAOd,gBAAP;AACD,CAjBD;;AAmBA,eAAe,SAASiB,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCtB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMqB,oBAAoB,GAAGZ,IAAI,IAAI;AACnC;AACAW,IAAAA,kBAAkB,CAAC;AAAEd,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAHD;;AAKA,QAAMa,qBAAqB,GAAGV,EAAE,IAAI;AAClC;AACAQ,IAAAA,kBAAkB,CAAC;AAAEd,MAAAA,IAAI,EAAE,QAAR;AAAkBM,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAHD;;AAKA,QAAMW,WAAW,GAAG;AAClBtB,IAAAA,KAAK,EAAEkB,SAAS,CAAClB,KADC;AAElBC,IAAAA,WAAW,EAAEiB,SAAS,CAACjB,WAFL;AAGlBsB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cAA2CL,KAAK,CAACQ;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GArBuBT,Y;;KAAAA,Y","sourcesContent":["import { useReducer } from 'react'\r\n\r\nimport CartContext from './cart-context'\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0\r\n}\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === 'ADD') {\r\n    const updatedItems = state.items.concat(action.item)\r\n\r\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id)\r\n\r\n    const existingCartItem = state.items[existingCartItemIndex]\r\n\r\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount\r\n    }\r\n  }\r\n\r\n  return defaultCartState\r\n}\r\n\r\nexport default function CartProvider(props) {\r\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\r\n\r\n  const addItemToCartHandler = item => {\r\n    // to add the item in the reducer funtion forward the item as part of the action that's why item: item\r\n    dispatchCartAction({ type: 'ADD', item: item })\r\n  }\r\n\r\n  const removeItemFromHandler = id => {\r\n    // in this case forward the id to the reducer to remove\r\n    dispatchCartAction({ type: 'REMOVE', id: id })\r\n  }\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromHandler\r\n  }\r\n\r\n  return <CartContext.Provider value={cartContext}>{props.children}</CartContext.Provider>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}